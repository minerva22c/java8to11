java에서 제공하는 함수형 인터페이스(java.util.function)
 + Function<T, R>
   - T : Input, R : Return
   - t apply(t) 를 통해 호출
   - aFunc.andThen(bFunc).apply(t) : aFunc -> bFunc
   - aFunc.compose(bFunc).apply(t) : bFunc -> aFunc
 + BiFunction<T, U, R>
   - T,U : Input, R : Output
   - r apply(t, u)
 + BinaryOperator<T>
   - same :  BiFunction<T, T, T>
 + Consumer<T>
   - Single inut, but no return
 + Supplier<T>
   - T get() : no input.
 + Predicate<T>
   - test(T t) : booolean 값을 제공
     ex) Predicate<String> startWithAAA = (str) -> str.startWith("AAA");
   - and(Predicate<T>), negate(), or(Predicate<T>)
 + UnaryOperator<T>
   - same : Function<T, T>

Effective Final
 - final 구문이 없어도 final 역할을 하는 로컬변수
 - operator 안에 정의된 변수를
   Local Class, Anonymous Class, Lamda 에서 사용하는 경우.
 - Local/Anonymous Class내에 동일 변수를 사용(shadowing)하는 경우는 해당변수로 인식됨.

메소드 레퍼런스 참조하는 방법
 - 스태틱 메소드 참조 => 타입::스태틱 메소드 ( UnaryOperator<String> hi = Greeting::hi; )
 - 특정 객체의 인스턴스 메소드 참조 => 객체 레퍼런스::인스턴스 메소드 ( UnaryOperator<String> hello = greeting::hello; )
 - 임의 객체의 인스턴스 메소드 참조 => 타입::인스턴스 메소드 ( Arrays.sort(names, String::compareToIgnoreCase); )
 - 생성자 참조 => 타입::new
    ( Supplier<Greeting> greetingSupplier = Greeting::new; // public Greeting(){               )
    ( Function<String, Greeting> argGreeting = Greeting::new; // public Greeting(String name){ )

인터페이스의 기본(Default) 메소드와 Static 메소드 1
 - Default Method
   : 인터페이스에서 메소드 선언이 아니라 구현체를 제공하는 방법
     해당 인터페이스를 구현한 클래스에 영향없이 새 기능을 추가할 수 있다.
     기본 메소드는 구현체가 모르게 추가된 기능으로 그만큼 리스크가 있다.
     (컴파일 에러는 아니지만, 구현체에 따라 런타임에러가 발생할 수 있다. @implSpec Javadoc 태그 사용
     본인이 수정할 수 있는 인터에이스만 기본 메소드를 제공할 수 있다.
     인터페이스를 상속받은 인터페이스에서 다시 추상 메소드로 변경할 수 있다.
     인터페이스 구현체가 재 정의할수도 있다.
 - Static Method
   : 해당타입 관련 헬퍼 또는 유틸리티 메소드를 제공할 때, 인터페이스에 스태틱 메소드 제공가능.

인터페이스의 기본(Default) 메소드와 Static 메소드 2 ( App2.java )
 ( 자바8에서 추가한 기본 메소드로 인한 API 변화 )
 - Iterable 의 기본 메소드
   forEach()
   spliterator()
 - Collection 의 기본 메소드
   stream() / parallelStream()
   removeIf(Predicate)
   spliterator()
 - Comparator 의 기본 메소드 및 스태틱 메소드
   reversed()
   thenComparing()
   static reverseOrder() / naturalOrder()
   static nullsFirst() / nullsLast()
   static comparing()
 * 자바8 부터는 abstract class를 사용할 필요성이 없어진다.
   => interface에서 default method를 정의하고, 구현체에서 해당 i/f의 메소드를 호출할수 있기 때문에..

스트림 API (App3.java)
 - Stream
  . sequence of elements supporting sequential and parallel aggregate operations
  . 데이터를 담고 있는 저장소 (컬렉션)이 아니다.
  . Functional in nature, 스트림이 처리하는 데이터 소스를 변경하지 않는다.
  . 스트림으로 처리하는 데이터는 오직 한번만 처리한다.
  . 무제한일 수도 있다. ( short curcuit 메소드를 사용해서 제한할 수 있다. )
  . 중개 오퍼레이션은 근본적으로 lazy 하다.
  . 손쉽게 병렬 처리할 수 있다.
 - Stream Pipeline
  . 0 또는 다수의 중개 오퍼레이션 (intermediate operation)과 한개의 종료 오퍼레이션 (terminal operation)으로 구성한다.
  . 스트림의 데이터 소스는 오직 터미널 오퍼레이션을 실행할 때에만 처리한다.
 - 중개 오퍼레이션
  . Stream을 리턴한다.
  . Stateless / Stateful 오퍼레이션으로 더 상세하게 구분할 수 있다.
    ( 대부분은 Stateless지만 distinct나 sorted 처럼 이전 소스 데이터를 참조해야 하는 오퍼레이션은 Stateful 오퍼레이션이다.)
  . filter, map, limit, skip, sorted, ...
 - 종료 오퍼레이션
  . Stream을 리턴하지 않는다.
  . collect, allMatch, count, forEach, min, max, ...

스트림 API 2 ( App4.java )
 - 걸러내기
  . Filter(Predicate)
    예) 이름이 세글자 이상인 데이터만 새로운 스트림으로..
 - 변경하기
  . Map(Function) 또는 FlatMap(Function)
    예) 각각의 Post 인스턴스에서 String title만 새로운 스트림으로
        List<List<String>> 을 String 스트림으로
 - 생성하기
  . generate(Supplier) 또는 Iterate(T seed, UnaryOperator)
    예) 10부터 1씩 증가하는 무제한 숫자 스트림
        랜덤 int 무제한 스트림
 - 제한하기
  . limit(long) 또는 skip(long)
    예) 앞에서 3개를 제외하고 최대 5만 스트림으로 리턴
 + 스트림에 있는 데이터가 특정 조건을 만족하는지 확인
  . anyMatch(), allMatch(), nonMatch()
    예) k로 시작하는 문자열 찾기. 스트림에 있는 모든값이 10보다 작은지 확인
 + 갯수세기
  . count()
 + 스트림을 데이터 하나로 뭉치기
  . reduce(identity, BiFunction), collect(), sum(), max()
    예) 모든 숫자의 합 구하기. 모든 데이터를 하나의 List 또는 Set에 옮겨 담기

Optional ( App5.java )
 - Optional 만들기
  . Optional.of()
  . Optional.ofNullable()
  . Optional.empty()
 - Optional 에 값이 있는지 없는지 확인하기
  . isPresent()
  . isEmpty() ( Java 11 부터 제공 )
 - Optional 에 있는 값 가져오기
  . get()
  . 만약에 비어있는 Optional에서 무언가 꺼낸다면?
 - Optional 예 값이 있는경우에 그 값을 가지고 ~~를 하라.
  . ifPresent(Consumer)
    예) spring 으로 시작하는 수업이 있으면 id를 출력하라.
 - Optional 에 값이 있으면 가져오고, 없는 경우에 ~~를 리턴하라.
  . orElse(T)
    예)JPA로 시작하는 수업이 없다면, 비어있는 수업을 리턴하라.
 - Optional 에 값이 있으면 가져오고, 없는 경우에 ~~를 하라.
  . orElseGet(Supplier)
    예)JPA로 시작하는 수업이 없다면 새로 만들어서 리턴하라.
 - Optional 에 값이 있으면 가져오고, 없는 경우에 에러를 던져라.
  . orElseThrow()
 - Optional 에 들어있는 값 걸러내기
  . Optional filter(Predicate)
 - Optional 에 들어있는 값 변환하기
  . Optional map(Function)
  . Optional flapMap(Function) : Optional 안에 들어있는 인스턴스가 Optional인 경우에 사용하면 편리하다.

Data/Time ( App6.java )
 - 디자인 철학
  . Clear : 날자, 시간 개념이 명확하다.
  . Fluent : 계속 이어 붙일수 있다.
  . Immutable : 변형을 하려면 새로운 인스턴스를 생성해야 한다.(thread safe)
  . Extensible : 호환성이 좋다.
 - 주요API
  . 기계용
    => EPOCH ( 1970년 1월 1일 0시 0분 0초 ) 로부터 현재까지의 타임스탬프를 표현한다.
  . 인류용
    => 연,월,일,시,분,초 를 표현한다.
  . Timestamp 는 Instant를 사용한다.
  . 특정날짜(LocalDate), 시간(LocalTime), 일시(LocalDateTime)를 사용할 수 있다.
  . 기간을 표현할 때는 Duration(시간 기반) 과 Period(날짜 기반)를 사용할 수 있다.
  . DateTimeFormatter를 사용해서 일시를 특정한 문자열로 포매팅 할 수 있다.
 - 참고
    https://codeblog.jonskeet.uk/2017/04/23/all-about-java-util-date/
    https://docs.oracle.com/javase/tutorial/datetime/overview/index.html
    https://docs.oracle.com/javase/tutorial/datetime/iso/overview.html
 - API
  . Instant.now() : 현재 UTC(GMT)를 리턴한다.
  . Instant.now().atZone(ZoneId.of("Asia/Seoul"))
  . ZonedDateTime zdt = now.atZone(ZoneId.systemDefault())
  . LocalDateTime.of(int, Month, int, int, int, int)
  . ZonedDateTime.of(int, Month, int, int, int, int, ZoneId)
  . Period between = Period.between(today, birthDay)

Completable Future ( App7.java )
 - Thread 구현방식
  . Thread를 상속받는 static class를 정의하여 run()를 overriding
  . 익명클래스를 선언과 동시에 run()을 overriding
  . thread.interrupt() : 해당 Thread에 InterruptedException 발생
  . thread.join() : 해당 Thread가 종료될 때까지 대기( 대기Thread도 interrupt 될 수 있음. 구현이 복잡해 짐 )

Executors ( App8.java )
 - High-Level Concurrency 프로그래밍
   . 쓰레드를 만들고 관리하는 작업을 어플리케이션에서 분리
   . 그런 기능을 Executor에게 위임
 - Executors 가 하는 일
   . 쓰레드 만들기 : 애플리케이션이 사용할 쓰레드 풀을 만들어 관리한다.
   . 쓰레드 관리 : 쓰레드 생명주기를 관리한다.
   . 작업 처리 및 실행 : 쓰레드로 실행할 작업을 제공할 수 있는 API를 제공한다.
 - 주요 인터페이스
   . Executors : execute(Runnable)
   . ExecutorService : Executor 상속받은 인터페이스로, Callable 도 실행할 수 있으며, Executor를 종료시키거나
     여러 Callable을 동시에 실행하는 등의 기능을 제공한다.
   . ScheduledExecutorService : ExecutorService 를 상속받은 인터페이스로 특정 시간 이후에 또는 주기적으로 작업을 실행할 수 있다.

Fork/Join
 - ExcutorService를 구현함.
 - Mulit Processor를 사용하는 Application을 개발할 때 유용함.

Callable 과 Future ( App9.java )
 - Callable
   . Runnable과 유사하지만 return값을 받을 수 있다.
 - Future
   . 비동기적인 작업의 현재 상태를 조회하거나 결과를 가져올 수 있다.
   . get()
     => 블로킹 콜이다. 타임아웃(최대한 기다릴 시간)을 설정할 수 있다.
   . isDone()
     => 작업상태 확인. 완료했으면 true 아니면 false
   . cancel()
     => 취소했으면 true, 못했으면 false를 리턴한다.
        파라미터를 넘길때 true를 설정하면 현재 진행중인 thread를 interrupt하고, 그렇지 않으면 작업이 끝날 때까지 기다린다.
   . invokeAll()
     => 여러작업을 동시에 실행. 모든 작업이 종료될때까지 기다린다.
   . invokeAny()
     => 여러작업을 동시에 실행. 하나라도 작업이 끝나면 종료된다.

CompletableFuture1 ( App10.java )
 - 자바에서 비동기 프로그래밍을 가틍케 하는 인터페이스
   ( Future를 사용해도 어느정도 가능하지만 제약이 많음. )
 - Future로 하기 어려운 작업들
   . Future를 외부에서 완료시킬 수 없다. 취소하거나, get()에 타임아웃을 설정할 수는 있다.
   . 블로킹 코드( get() )를 사용하지 않고서는, 작업이 끝났을 때 콜백을 실행할 수 없다.
   . 여러 Future를 조합할 수 없다. 예) Event정보 가져온 다음 Event에 참석하는 회원목록 가져오기
   . 예외처리용 API를 제공하지 않는다.
 - CompletableFuture
   . Implements Future
   . Implements CompletionStage
 - 비동기로 작업 실행하기
   . 리턴값이 없는 경우 : runAsync()
   . 리턴값이 있는 경우 : supplyAsync()
   . 원하는 Executor(Threadpool)를 사용해서 실행할 수도 있다. ( 기본은 FolkJoinPool.commonPool() )
 - 콜백 제공하기
   . thenApply(Function) : 리턴값을 받아서 다른 값으로 변경하는 콜백
   . thenAccept(Consumer) : 리턴값을 받아서 또 다른 작업을 처리하는 콜백(리턴없음)
   . thenRun(Runnable) : 리턴값을 받지 않고 다른 작업을 처리하는 콜백
   . 콜백 자체를 또 다른 쓰레드에서 실행할 수 있다.

CompletableFuture2 ( App11.java )
  - 조합하기
    . thenCompose() : 두 작업이 서로 이어서 실행하도록 조합
    . thenCombine() : 두 작업을 독립적으로 실행하고, 둘 다 종료했을 때 콜백 실행
    . allOf() : 여러 작업을 실행하고, 모두 종료했을 때 콜백 실행
    . anyOf() : 여러 작업을 실행하고, 가장 빨리 끝난 하나의 결과에 콜백 실행
  - 예외처리
    . exceptionally(Function)
    . handle(BiFunction)

Annotation ( App12.java )


배열 Parallel 정렬 ( App13.java )
 - Array.parallelSort()
  . Fork/Join 프레임워크를 사용해서 배열을 병렬로 정렬하는 기능을 제공한다.
  . 알고리즘 효율성은 같다. 시간 O(n log N), 공간 O(n)

Metaspace
 - JVM 의 여러 메모리 영역 중 PermGen메모리 영역이 없어지고, Metaspace 영역이 생겼다.
 - PermGen
  . permanent generation. 클래스 메타데이터를 담는곳.
  . Heap 영역에 속함.
  . 기본값으로 제한된 크기를 갖고 있음.
  . -XX:PermSize=N, PermGen 초기 사이즈를 설정.
  . -XX:MaxPermSize=N, PermGen 최대 사이즈를 설정.
 - Metaspace
  . 클래스 메타데이터를 담는 곳.
  . Heap 영역이 아니라, Native 메모리 영역이다.
  . 기본값으로 제한된 크기를 가지고 있지 않다.(필요한 만큼 계속 늘어난다.)
  . 자바8 부터는 PermGen 관련 옵션을 무시한다.
  . -XX:MetaspaceSize=N, Metaspace 초기 사이즈를 설정.
  . -XX:MaxMetaspaceSize=N, Metaspace 최대 사이즈를 설정.

